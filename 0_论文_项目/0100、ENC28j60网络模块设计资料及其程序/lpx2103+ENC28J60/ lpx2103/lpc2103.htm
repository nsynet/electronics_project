<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\MCU_Workspace\ARM\¸´¼þ lpx2103\lpc2103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\MCU_Workspace\ARM\¸´¼þ lpx2103\lpc2103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.0 [Build 951]: Last Updated: Thu Aug 09 16:50:06 2007
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize,Cycles,Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main -> ENC_main -> simple_server -> __0printf -> _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[bcf930]">Reset_Handler</a>
 <LI><a href="#[1052388]">__scatterload</a>
 <LI><a href="#[10522b8]">__scatterload_rt2</a>
 <LI><a href="#[1052308]">__scatterload_null</a>
 <LI><a href="#[1051dd4]">__scatterload_copy</a>
 <LI><a href="#[1051984]">__scatterload_zeroinit</a>
 <LI><a href="#[bcf7b0]">__user_initial_stackheap</a>
 <LI><a href="#[1060c34]">__ARM_call_via_r0</a>
 <LI><a href="#[1060cb4]">__call_via_r0</a>
 <LI><a href="#[1060b68]">__ARM_call_via_r1</a>
 <LI><a href="#[1060bb8]">__call_via_r1</a>
 <LI><a href="#[1060a9c]">__ARM_call_via_r2</a>
 <LI><a href="#[1060aec]">__call_via_r2</a>
 <LI><a href="#[10609d0]">__ARM_call_via_r3</a>
 <LI><a href="#[1060a20]">__call_via_r3</a>
 <LI><a href="#[10608d4]">__ARM_call_via_r4</a>
 <LI><a href="#[1060954]">__call_via_r4</a>
 <LI><a href="#[10607d8]">__ARM_call_via_r5</a>
 <LI><a href="#[1060858]">__call_via_r5</a>
 <LI><a href="#[10606dc]">__ARM_call_via_r6</a>
 <LI><a href="#[106075c]">__call_via_r6</a>
 <LI><a href="#[10605e0]">__ARM_call_via_r7</a>
 <LI><a href="#[1060660]">__call_via_r7</a>
 <LI><a href="#[105d120]">__fplib_config_pureend_doubles</a>
 <LI><a href="#[bcfefc]">Undef_Handler</a>
 <LI><a href="#[bcfe84]">SWI_Handler</a>
 <LI><a href="#[bcfe08]">PAbt_Handler</a>
 <LI><a href="#[bcfd8c]">DAbt_Handler</a>
 <LI><a href="#[bcfd14]">IRQ_Handler</a>
 <LI><a href="#[bcfc9c]">FIQ_Handler</a>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3><UL>
 <LI><a href="#[bcfefc]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfefc]">Undef_Handler</a><BR>
 <LI><a href="#[bcfe84]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfe84]">SWI_Handler</a><BR>
 <LI><a href="#[bcfe08]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfe08]">PAbt_Handler</a><BR>
 <LI><a href="#[bcfd8c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfd8c]">DAbt_Handler</a><BR>
 <LI><a href="#[bcfd14]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfd14]">IRQ_Handler</a><BR>
 <LI><a href="#[bcfc9c]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[bcfc9c]">FIQ_Handler</a><BR>
</UL>
<BR>
<P><STRONG><a name="[bcf930]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[fda5e4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __main -> __rt_entry -> __rt_lib_init -> _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[fd9c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1052388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1052388]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[fda5e4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10522b8]"></a>__scatterload_rt2</STRONG> (ARM, 48 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd9c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1052308]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1051dd4]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1051dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1051dd4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1051984]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[fd2074]"></a>__ARM_argv_veneer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[b27948]"></a>uart_int</STRONG> (ARM, 68 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b277ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b278d4]"></a>spi_int</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b277ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b27860]"></a>do_spi</STRONG> (ARM, 28 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b277ec]"></a>main</STRONG> (ARM, 120 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main -> ENC_main -> simple_server -> __0printf -> _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[b27774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_main
<LI><a href="#[b278d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int
<LI><a href="#[b27948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_int
<LI><a href="#[fdc13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(.text)
</UL>
<P><STRONG><a name="[b209b4]"></a>fputc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b20668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __0printf.o(.text)
</UL>
<P><STRONG><a name="[b20940]"></a>fgetc</STRONG> (ARM, 16 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b20668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[b206e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[b208cc]"></a>ferror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fdc13c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__0printf (via Veneer)
</UL>

<P><STRONG><a name="[b20854]"></a>_ttywrch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b20668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[b207dc]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b207dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b207dc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[fd9aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>

<P><STRONG><a name="[b20668]"></a>sendchar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b20854]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[b20940]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[b209b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b206e0]"></a>getkey</STRONG> (ARM, 24 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b20940]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[bcf7b0]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd931c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bcd858]"></a>SAMspiSend</STRONG> (ARM, 28 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcd570]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[bcd5f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[bcd670]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[bcd6ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>

<P><STRONG><a name="[bcd7e0]"></a>delay_ms</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[bcd768]"></a>_delay_us</STRONG> (ARM, 48 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcd37c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[bcd6ec]"></a>enc28j60ReadOp</STRONG> (ARM, 88 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60ReadOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAMspiSend
<LI><a href="#[bcdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPASSIVE
<LI><a href="#[bcde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[bcd478]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[bcd670]"></a>enc28j60WriteOp</STRONG> (ARM, 56 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAMspiSend
<LI><a href="#[bcdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPASSIVE
<LI><a href="#[bcde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[bcd188]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[bcd3fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd4f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>

<P><STRONG><a name="[bcd5f0]"></a>enc28j60ReadBuffer</STRONG> (ARM, 84 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60ReadBuffer</UL>
<BR>[Calls]<UL><LI><a href="#[bcd858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAMspiSend
<LI><a href="#[bcdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPASSIVE
<LI><a href="#[bcde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[bcd570]"></a>enc28j60WriteBuffer</STRONG> (ARM, 76 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60WriteBuffer</UL>
<BR>[Calls]<UL><LI><a href="#[bcd858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAMspiSend
<LI><a href="#[bcdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPASSIVE
<LI><a href="#[bcde0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd188]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[bcd4f4]"></a>enc28j60SetBank</STRONG> (ARM, 68 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[bcd3fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd478]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[bcd478]"></a>enc28j60Read</STRONG> (ARM, 28 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60Read -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[bcd6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[bcd188]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[bcd208]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[bcd37c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[bcd3fc]"></a>enc28j60Write</STRONG> (ARM, 36 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[bcd670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd104]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[bcd188]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[bcd300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[bcd37c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[bcd37c]"></a>enc28j60PhyWrite</STRONG> (ARM, 80 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60PhyWrite -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[bcd768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[bcd300]"></a>enc28j60clkout</STRONG> (ARM, 12 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60clkout -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bcd284]"></a>enc28j60Init</STRONG> (ARM, 468 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enc28j60Init -> enc28j60PhyWrite -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[bcd3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[bcd670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[bcd7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bcdd94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSPASSIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[b27774]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ENC_main
<LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bcd208]"></a>enc28j60getrev</STRONG> (ARM, 8 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60getrev -> enc28j60Read -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b27774]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ENC_main
<LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bcd188]"></a>enc28j60PacketSend</STRONG> (ARM, 156 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[bcd570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[bcd670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc44c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[bc4544]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc47c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[bc4848]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[bc48d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[bc495c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[bcd104]"></a>enc28j60PacketReceive</STRONG> (ARM, 280 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PacketReceive -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bcd3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[bcd478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[bcd5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[bcd670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[bcd6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[b27774]"></a>ENC_main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, enc_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ENC_main -> simple_server -> __0printf -> _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[bc7584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bcd208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[bcd284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b277ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc4d64]"></a>checksum</STRONG> (ARM, 124 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc44c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[bc4544]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc47c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[bc4848]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[bc4ad8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>

<P><STRONG><a name="[bc4ce4]"></a>init_ip_arp_udp_tcp</STRONG> (ARM, 76 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc4c5c]"></a>eth_type_is_arp_and_my_ip</STRONG> (ARM, 84 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc4bd4]"></a>eth_type_is_ip_and_my_ip</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc4b5c]"></a>make_eth</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4544]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc47c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[bc4848]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[bc48d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[bc495c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[bc4ad8]"></a>fill_ip_hdr_checksum</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fill_ip_hdr_checksum</UL>
<BR>[Calls]<UL><LI><a href="#[bc4d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[bc44c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[bc4a64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_ip
</UL>

<P><STRONG><a name="[bc4a64]"></a>make_ip</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = make_ip -> fill_ip_hdr_checksum</UL>
<BR>[Calls]<UL><LI><a href="#[bc4ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4544]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc47c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[bc4848]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[bc48d0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>

<P><STRONG><a name="[bc49e8]"></a>make_tcphead</STRONG> (ARM, 216 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_tcphead</UL>
<BR>[Called By]<UL><LI><a href="#[bc4544]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc47c0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
</UL>

<P><STRONG><a name="[bc495c]"></a>make_arp_answer_from_request</STRONG> (ARM, 132 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_arp_answer_from_request -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc4b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc48d0]"></a>make_echo_reply_from_request</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_echo_reply_from_request -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc4a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[bc4b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc4848]"></a>make_udp_reply_from_request</STRONG> (ARM, 164 bytes, Stack size 32 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = make_udp_reply_from_request -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc4a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[bc4b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[bc4d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc47c0]"></a>make_tcp_synack_from_syn</STRONG> (ARM, 108 bytes, Stack size 8 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = make_tcp_synack_from_syn -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc49e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[bc4a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[bc4b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[bc4d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc473c]"></a>get_tcp_data_pointer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc46c0]"></a>init_len_info</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc4644]"></a>fill_tcp_data_p</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bde1a8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;print_webpage
</UL>

<P><STRONG><a name="[bc45c8]"></a>fill_tcp_data</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bde1a8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;print_webpage
</UL>

<P><STRONG><a name="[bc4544]"></a>make_tcp_ack_from_any</STRONG> (ARM, 128 bytes, Stack size 8 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = make_tcp_ack_from_any -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc49e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[bc4a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[bc4b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[bc4d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc44c0]"></a>make_tcp_ack_with_data</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_tcp_ack_with_data -> enc28j60PacketSend -> enc28j60Write -> enc28j60SetBank -> enc28j60WriteOp</UL>
<BR>[Calls]<UL><LI><a href="#[bc4ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[bc4d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[bcd188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bde2a0]"></a>verify_password</STRONG> (ARM, 36 bytes, Stack size 8 bytes, simple_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = verify_password -> strncmp</UL>
<BR>[Calls]<UL><LI><a href="#[fdb728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
<LI><a href="#[bde224]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
</UL>

<P><STRONG><a name="[bde224]"></a>analyse_get_url</STRONG> (ARM, 124 bytes, Stack size 16 bytes, simple_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = analyse_get_url -> verify_password -> strncmp</UL>
<BR>[Calls]<UL><LI><a href="#[bde2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bde1a8]"></a>print_webpage</STRONG> (ARM, 484 bytes, Stack size 16 bytes, simple_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webpage</UL>
<BR>[Calls]<UL><LI><a href="#[bc45c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data
<LI><a href="#[bc4644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server
</UL>

<P><STRONG><a name="[bc7584]"></a>simple_server</STRONG> (ARM, 1128 bytes, Stack size 64 bytes, simple_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = simple_server -> __0printf -> _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[bc44c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[bc4544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[bc45c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data
<LI><a href="#[bc4644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[bc46c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[bc473c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[bc47c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[bc4848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[bc48d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[bc495c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[bc4bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[bc4c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[bc4ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ip_arp_udp_tcp
<LI><a href="#[bcd104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[bcd208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[bcd284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[bcd300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[bcd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[bcd7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bde1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[bde224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
<LI><a href="#[bde2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password
<LI><a href="#[fdb2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[fdb728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[fdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[fdc13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b27774]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ENC_main
</UL>

<P><STRONG><a name="[fdcec8]"></a>__I_use_semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fdce78]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fdc834]"></a>_printf_longlong_hex</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, _printf_longlong_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[fd7ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fdc72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[fdc13c]"></a>__0printf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, __0printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __0printf -> _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[b208cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror (via Veneer)
<LI><a href="#[fd7494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b277ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server (via Veneer)
</UL>

<P><STRONG><a name="[fdbb54]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server (via Veneer)
</UL>

<P><STRONG><a name="[fdb728]"></a>strncmp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server (via Veneer)
<LI><a href="#[bde2a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;verify_password (via Veneer)
</UL>

<P><STRONG><a name="[fdb2fc]"></a>strlen</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen</UL>
<BR>[Called By]<UL><LI><a href="#[bc7584]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;simple_server (via Veneer)
</UL>

<P><STRONG><a name="[fdad24]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[fdac9c]"></a>__rt_stackheap_init</STRONG> (ARM, 60 bytes, Stack size 24 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init -> __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[fd8818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[fd931c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fdac14]"></a>__rt_heap_extend</STRONG> (ARM, 24 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdadf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[fd9c6c]"></a>__rt_entry</STRONG> (ARM, 76 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_entry -> __rt_lib_init -> _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[fd031c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[fd0770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[fd1fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
<LI><a href="#[fd50b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
<LI><a href="#[fdac9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fda5e4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[10522b8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[fd9b24]"></a>__rt_exit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[fd1f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd50b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[fd9aac]"></a>__rt_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kernel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b207dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[fd931c]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[bcf7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fd6e8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[fdac9c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[fd8818]"></a>__rt_stackheap_storage</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fdac9c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[fd7ae4]"></a>_printf_int_common</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[fd7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[fd79e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[1060a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc834]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[fd7494]"></a>_printf_char_common</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _printf_char_common -> __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[fd67b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc13c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[fd6d64]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fd6e8c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd931c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fd6e04]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fd67b0]"></a>__printf</STRONG> (Thumb, 740 bytes, Stack size 48 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __printf -> _printf_longlong_hex -> _printf_int_common</UL>
<BR>[Calls]<UL><LI><a href="#[fd614c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb (Weak Reference)
<LI><a href="#[fd61c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[fd6240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str (Weak Reference)
<LI><a href="#[fd62b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[fd6334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct (Weak Reference)
<LI><a href="#[fd63b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (Weak Reference)
<LI><a href="#[fd643c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (Weak Reference)
<LI><a href="#[fd64b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
<LI><a href="#[fd6534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (Weak Reference)
<LI><a href="#[fd65b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (Weak Reference)
<LI><a href="#[fd6630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[fdc834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[10609d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r3
<LI><a href="#[1060a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
<LI><a href="#[1060b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7494]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[fd588c]"></a>_printf_outstr_char</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_outstr_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _printf_outstr_char</UL>
<BR>[Calls]<UL><LI><a href="#[1060a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[fd5490]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_input_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[fd50b4]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exit -> __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[fd4fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[fd6630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[fd9b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fd1fa8]"></a>__rt_lib_init</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_lib_init -> _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[fd1528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[fd15a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[fd161c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[fd1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[fd1710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[fd1788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[fd1804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[fd1880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[fd18fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[fd197c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[fd19f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[fd1a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[fd1af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[fd1b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[fd1c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[fd1ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[fd1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[fd1de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[fd2074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer (via Veneer)
<LI><a href="#[fd6630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[105d22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
<LI><a href="#[105f85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[fd1f58]"></a>__rt_lib_shutdown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[fd14a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[fd1be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
<LI><a href="#[fd6630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9b24]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>

<P><STRONG><a name="[fd0770]"></a>_platform_post_stackheap_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd9c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fd031c]"></a>_platform_post_lib_init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init</UL>
<BR>[Called By]<UL><LI><a href="#[fd9c6c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1060c34]"></a>__ARM_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060cb4]"></a>__call_via_r0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060b68]"></a>__ARM_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1060bb8]"></a>__call_via_r1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060a9c]"></a>__ARM_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd588c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_outstr_char
<LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[fd7ae4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1060aec]"></a>__call_via_r2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[10609d0]"></a>__ARM_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1060a20]"></a>__call_via_r3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[10608d4]"></a>__ARM_call_via_r4</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060954]"></a>__call_via_r4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[10607d8]"></a>__ARM_call_via_r5</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060858]"></a>__call_via_r5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[10606dc]"></a>__ARM_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[106075c]"></a>__call_via_r6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[10605e0]"></a>__ARM_call_via_r7</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[1060660]"></a>__call_via_r7</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[105f85c]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[105d6c4]"></a>__ARM_get_argv</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, no_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_get_argv</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_init.o(.emb_text)
</UL>
<P><STRONG><a name="[105c228]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105d22c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[105d22c]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[105c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[105d120]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[bcfefc]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfefc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcfe84]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfe84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfe84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcfe08]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfe08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfe08]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcfd8c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfd8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfd8c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcfd14]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfd14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcfc9c]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bcfc9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcfc9c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bcde0c]"></a>CSACTIVE</STRONG> (ARM, 20 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcd570]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[bcd5f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[bcd670]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[bcd6ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>

<P><STRONG><a name="[bcdd94]"></a>CSPASSIVE</STRONG> (ARM, 20 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcd284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[bcd570]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[bcd5f0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[bcd670]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[bcd6ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>

<P><STRONG><a name="[fd1de4]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd6630]"></a>__ARM_stackcheck</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
<LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
<LI><a href="#[fd50b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
<LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd1d68]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1ce8]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1c60]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1be4]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[fdadf8]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fdac14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[fd1b68]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd4fe4]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd50b4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[fd1af0]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1a74]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd19f8]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd197c]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd18fc]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1880]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1804]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1788]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1710]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1690]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd161c]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd65b0]"></a>_printf_charcount</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd6534]"></a>_printf_fp_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd64b8]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd643c]"></a>_printf_int_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd63b8]"></a>_printf_longlong_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd6334]"></a>_printf_longlong_oct</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd62b8]"></a>_printf_mbtowc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd79e0]"></a>_printf_post_padding</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7ae4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common (Weak Reference)
</UL>

<P><STRONG><a name="[fd7960]"></a>_printf_pre_padding</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7ae4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common (Weak Reference)
</UL>

<P><STRONG><a name="[fd6240]"></a>_printf_str</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fdc72c]"></a>_printf_truncate_unsigned</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fdc834]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex (Weak Reference)
</UL>

<P><STRONG><a name="[fd61c8]"></a>_printf_wc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd614c]"></a>_printf_wctomb</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd67b0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[fd15a4]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd1528]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1fa8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[fd14a4]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[fd1428]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
