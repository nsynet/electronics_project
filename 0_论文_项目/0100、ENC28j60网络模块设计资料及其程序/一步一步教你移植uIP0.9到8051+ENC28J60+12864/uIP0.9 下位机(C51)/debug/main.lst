C51 COMPILER V8.05a   MAIN                                                                 07/03/2011 15:47:23 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\debug\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\debug\main.lst) TABS(5) OBJE
                    -CT(.\debug\main.obj)

line level    source

   1          /*
   2           * Copyright (c) 2001-2003, Adam Dunkels.
   3           * All rights reserved. 
   4           *
   5           * Redistribution and use in source and binary forms, with or without 
   6           * modification, are permitted provided that the following conditions 
   7           * are met: 
   8           * 1. Redistributions of source code must retain the above copyright 
   9           *    notice, this list of conditions and the following disclaimer. 
  10           * 2. Redistributions in binary form must reproduce the above copyright 
  11           *    notice, this list of conditions and the following disclaimer in the 
  12           *    documentation and/or other materials provided with the distribution. 
  13           * 3. The name of the author may not be used to endorse or promote
  14           *    products derived from this software without specific prior
  15           *    written permission.  
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  18           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  21           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  23           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  25           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  26           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  27           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  28           *
  29           * This file is part of the uIP TCP/IP stack.
  30           *
  31           * $Id: main.c,v 1.10.2.1 2003/10/04 22:54:17 adam Exp $
  32           *
  33           */
  34          #include "uip.h" 
  35          #include "uip_arp.h"
  36          //#include "rtl8019as.h"
  37          #include "httpd.h"
  38          //#include "telnet.h"
  39          #include "mcu_uart.h"
  40          #include "enc28j60.h"
  41          #include "splc501.h"
  42          #include "tcp_server.h"
  43          
  44          #define BUF ((struct uip_eth_hdr *)&uip_buf[0])
  45          
  46          #ifndef NULL
              #define NULL (void *)0
              #endif /* NULL */
  49          
  50          /*-----------------------------------------------------------------------------------*/
  51          int
  52          main(void)
  53          {
  54   1           idata u8_t i, arptimer;
C51 COMPILER V8.05a   MAIN                                                                 07/03/2011 15:47:23 PAGE 2   

  55   1           idata u16_t j;
  56   1      //   idata int i;
  57   1           InitGraphic();//putchar(0,62,0);
  58   1           //while(1)
  59   1           for(i=0;i<100;i++)
  60   1           {
  61   2                putstring(6,0, "Welcome to http://shop34480016.taobao.com  www.dianshijin.cn");
  62   2           }
  63   1      
  64   1           init_uart();
  65   1           printu("starting......\r\n");
  66   1           /* Initialize the device driver. */ 
  67   1           //  rtl8019as_init();
  68   1           dev_init();
  69   1           uip_arp_init();
  70   1           /* Initialize the uIP TCP/IP stack. */
  71   1           uip_init();
  72   1           printu("11111111111111111111111\r\n");
  73   1           /* Initialize the HTTP server. */
  74   1      //   httpd_init();
  75   1           tcp_server_init();
  76   1           
  77   1           arptimer = 0;
  78   1           printu("222222222222222222222222222\r\n");
  79   1        while(1) {
  80   2          /* Let the tapdev network device driver read an entire IP packet
  81   2             into the uip_buf. If it must wait for more than 0.5 seconds, it
  82   2             will return with the return value 0. If so, we know that it is
  83   2             time to call upon the uip_periodic(). Otherwise, the tapdev has
  84   2             received an IP packet that is to be processed by uIP. */
  85   2          uip_len = dev_poll();
  86   2           for(j=0;j<500;j++);
  87   2      /*
  88   2           if(uip_len > 0)
  89   2           {
  90   2                printuf("--------------- uip_len = 0x%x", uip_len);
  91   2                printuf("%x ----------\r\n", uip_len);
  92   2                for(i=0;i<uip_len;i++)
  93   2                {
  94   2                     printuf("%x ", uip_buf[i]);
  95   2                     if((i+1)%16==0) printu("\r\n");              
  96   2                }
  97   2                printu("\r\n");               
  98   2           }
  99   2      */
 100   2          if(uip_len == 0) {
 101   3            for(i = 0; i < UIP_CONNS; i++) {
 102   4           uip_periodic(i);
 103   4           /* If the above function invocation resulted in data that
 104   4              should be sent out on the network, the global variable
 105   4              uip_len is set to a value > 0. */
 106   4           if(uip_len > 0) {
 107   5             uip_arp_out();
 108   5             dev_send();
 109   5           }
 110   4            }
 111   3      
 112   3      #if UIP_UDP
                    for(i = 0; i < UIP_UDP_CONNS; i++) {
                   uip_udp_periodic(i);
                   /* If the above function invocation resulted in data that
                      should be sent out on the network, the global variable
C51 COMPILER V8.05a   MAIN                                                                 07/03/2011 15:47:23 PAGE 3   

                      uip_len is set to a value > 0. */
                   if(uip_len > 0) {
                     uip_arp_out();
                     dev_send();
                   }
                    }
              #endif /* UIP_UDP */
 124   3            
 125   3            /* Call the ARP timer function every 10 seconds. */
 126   3            if(++arptimer == 20) {  
 127   4           uip_arp_timer();
 128   4           arptimer = 0;
 129   4            }
 130   3            
 131   3          } else {
 132   3            if(BUF->type == htons(UIP_ETHTYPE_IP)) {
 133   4           uip_arp_ipin();
 134   4           uip_input();
 135   4           /* If the above function invocation resulted in data that
 136   4              should be sent out on the network, the global variable
 137   4              uip_len is set to a value > 0. */
 138   4           if(uip_len > 0) {
 139   5             uip_arp_out();
 140   5             dev_send();
 141   5           }
 142   4            } else if(BUF->type == htons(UIP_ETHTYPE_ARP)) {
 143   4           uip_arp_arpin();
 144   4           /* If the above function invocation resulted in data that
 145   4              should be sent out on the network, the global variable
 146   4              uip_len is set to a value > 0. */    
 147   4           if(uip_len > 0) {   
 148   5             dev_send();
 149   5           }
 150   4            }
 151   3          }
 152   2          
 153   2        }
 154   1        return 0;
 155   1      }
 156          /*-----------------------------------------------------------------------------------*/
 157          void
 158          uip_log(char *m)
 159          {
 160   1      //  printf("uIP log message: %s\n", m);
 161   1      }
*** WARNING C280 IN LINE 158 OF MAIN.C: 'm': unreferenced local variable
 162          /*-----------------------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    316    ----
   CONSTANT SIZE    =    134    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----       4
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
